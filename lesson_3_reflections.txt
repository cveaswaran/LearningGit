Lesson 3 Reflections


1.
When would you want to use a remote repository rather than keeping all your work local?

Multiple people can work on the same set of files by pulling rmote files, making modifications and pushing changes back to remote. Even for a single-person project, having a remote repository allows one to work from multiple locations on the same project seemlessly.

2.
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Manual pull lets you decide when you want to bring in remote changes into your branch(es). If git is automatically updating your local repository in response to change in the remote, you really have no control on what and when changes happen to your repo. This could lead to unexpected results. 


3.
Describe the differences between forks, clones, and branches. When would you use one instead of another?

"fork"ing is the process of creating a copy of a repo on GitHub. For example, you can fork someone else's public repository. Or you can for your own repo.  forking is a process strictly limited to GitHub.
When you create a repo, you start with a master "branch". If you now want to test an experimental feature, or test out a new idea, without changing the master, you can create a "branch". "branching" is a strictly local process. commits you make in the branch doesn't affect the master until you merge the new branch with the master.
"cloning" a repository is the process of creating a copy of a remore repo in a local machine, or creating a copy of a repo on the same local machine. Cloning is done most often when you want to work on files in a  remote repo: you clone the remote repo to your local machine, make changes locally, and push the changes back to the remote.

4.
What is the benefit of having a copy of the last known state of the remote stored locally?

Allows you to work on the last known version, even though you are not connected to the network, for example, whe traveling. 


5.
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git/GitHub, collaboration usually involves exchanging files between collaborators or placing them in centrtal cloud locations. In these cases tracking changes made by different  people becomes a nightmare. 

6.
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Branching is useful when you want to try out a new idea, without affecting the work so far committed, say on a master. In this case, you can create a new branch, perform necessary modifications and commits on this branch, and later when you are ready to share, push the branch to GitHub for comments from others or merge into the main branch. This allows you to optionally stop working on the new branch, come back and work on the master branch again, and switch back to the other branch. This branching/merging works great in a collaborative environment, even though it is more involved than using a single master branch. For single-person work, it is probably easier to work on a single branch.  


