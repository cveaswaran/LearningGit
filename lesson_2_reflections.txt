Reflections - Lesson 2

1.
What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git creates a directory called .git/ to hold metadata information about the repository. Because git repositories are collections of files, you would want a way to indicate which files are in the repo, and keep track of changes to the repo and its files. This is the purpose of the metadata directory. 

2.
How is the staging area different from the working directory and the repository? What value do you think it offers?

A staging area conceptually  describes files that are ready to be committed to the repo, but haven't yet been committed. Working directory is where you modify your files. After making modifications, you can stage a file using "git add filename" command to indicate that the file is to be placed in the staging area.

The separation between working directory and a staging area allows us to distinguish a work in progress from a completed logical unit that is ready to be committed. 

 3.
How can you use the staging area to make sure you have one commit per logical change?


4.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to make experimental changes without affecting the main code and logic, you could create a branch, checkout the branch, and make modifications. These modifications only affect the currently checkout branch, leaving the original master (and other branches if you had any) untouched. 


5. 
How do the diagrams help you visualize the branch structure?

Diagrams represent each commit as a node. You can visualize the commit order or history through a tree diagram. By following the nodes through the arrows, you can see unreachable commits.


6.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines the commits made in each branch. We represent this as a single new node, with two back arrows going to the latest nodes of each branch. This signifies that from the merged node you can access commits done in both branches sequentially in time-stamp order.




 
